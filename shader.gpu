// Vertex shader
const vertexShaderSource = `
    attribute vec3 aVertex;
    attribute vec3 aNormal;

    uniform mat4 uModelViewProjectionMatrix;
    uniform vec3 uLightPosition;
    uniform vec3 uAmbientColor;
    uniform vec3 uDiffuseColor;
    uniform vec3 uSpecularColor;
    uniform vec3 uColor;
    uniform float uShininess;

    varying vec3 vFlatColor;

    void main() {
        vec3 lightDir = normalize(uLightPosition - aVertex);
        vec3 normal = normalize(aVertex);

        float diff = max(dot(normal, lightDir), 0.0);

        vec3 viewDir = normalize(-aVertex);
        vec3 reflectDir = reflect(-lightDir, normal);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), uShininess);

        vFlatColor = uAmbientColor + diff * uDiffuseColor + uColor + spec * uSpecularColor;

        gl_Position = uModelViewProjectionMatrix * vec4(aVertex, 1.0);
    }
`;

// Fragment shader
const fragmentShaderSource = `
    #ifdef GL_FRAGMENT_PRECISION_HIGH
       precision highp float;
    #else
       precision mediump float;
    #endif

    varying vec3 vFlatColor;

    void main() {
        gl_FragColor = vec4(vFlatColor, 1.0);
    }
`;