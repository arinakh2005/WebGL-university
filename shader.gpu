// Vertex shader
const vertexShaderSource = `
    attribute vec2 aTexCoord;
    attribute vec3 aVertex;
    attribute vec3 aNormal;

    uniform mat4 uModelViewProjectionMatrix;
    uniform vec3 uLightPosition;

    varying vec2 vTexCoord;
    varying vec3 vNormal;
    varying vec3 vPosition;

    void main() {
        vTexCoord = aTexCoord;
        vNormal = aNormal;
        vPosition = aVertex;

        gl_Position = uModelViewProjectionMatrix * vec4(aVertex, 1.0);
    }
`;

// Fragment shader
const fragmentShaderSource = `
    #ifdef GL_FRAGMENT_PRECISION_HIGH
       precision highp float;
    #else
       precision mediump float;
    #endif

    uniform sampler2D uDiffuseSampler;
    uniform sampler2D uSpecularSampler;
    uniform sampler2D uNormalSampler;

    uniform vec3 uLightPosition;
    uniform vec3 uAmbientColor;
    uniform vec3 uDiffuseColor;
    uniform vec3 uSpecularColor;
    uniform float uShininess;

    varying vec2 vTexCoord;
    varying vec3 vNormal;
    varying vec3 vPosition;

    void main() {
        vec3 diffuseTexture = texture2D(uDiffuseSampler, vTexCoord).rgb;
        vec3 specularTexture = texture2D(uSpecularSampler, vTexCoord).rgb;
        vec3 normalMap = texture2D(uNormalSampler, vTexCoord).rgb * 2.0 - 1.0;

        vec3 T = normalize(cross(vNormal, vec3(0.0, 1.0, 0.0)));
        vec3 B = normalize(cross(vNormal, T));
        mat3 TBN = mat3(T, B, vNormal);
        vec3 normalFromTexture = normalize(TBN * normalMap);

        vec3 lightDir = normalize(uLightPosition - vPosition);
        float diff = max(dot(normalFromTexture, lightDir), 0.0);
        vec3 viewDir = normalize(-vPosition);
        vec3 reflectDir = reflect(-lightDir, normalFromTexture);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), uShininess);

        vec3 finalColor = diffuseTexture * uDiffuseColor * diff + specularTexture * uSpecularColor * spec;
        finalColor += uAmbientColor;

        gl_FragColor = vec4(finalColor, 1.0);
    }
`;